{"version":3,"file":"main.a92f964e12898a6676fa.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AAAA;AAUA;AAMA;AALA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AAAA;AAGA;AACA;AAAA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA","sources":["webpack://@toppings/client/./components/Skeleton/Paragraph/Paragraph.stories.tsx","webpack://@toppings/client/./components/Skeleton/Paragraph/index.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import type { Meta, Story } from \\\"@storybook/react\\\";\\nimport type { ComponentProps } from \\\"react\\\";\\nimport Paragraph from \\\".\\\";\\n\\ntype Props = ComponentProps<typeof Paragraph>;\\n\\nconst Template: Story<Props> = args => <Paragraph {...args} />;\\n\\nexport const Default = Template.bind({});\\n\\nDefault.args = {};\\n\\nexport default {\\n  title: \\\"Paragraph\\\",\\n  component: Paragraph\\n} as Meta;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":7},\"endLoc\":{\"col\":62,\"line\":7},\"startBody\":{\"col\":31,\"line\":7},\"endBody\":{\"col\":62,\"line\":7}}};\n    \nimport type { Meta, Story } from \"@storybook/react\";\nimport type { ComponentProps } from \"react\";\nimport Paragraph from \".\";\n\ntype Props = ComponentProps<typeof Paragraph>;\n\nconst Template: Story<Props> = args => <Paragraph {...args} />;\n\nexport const Default = Template.bind({});\n\nDefault.args = {};\n\nexport default {\n  title: \"Paragraph\",\n  component: Paragraph\n} as Meta;\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Paragraph {...args} />\" }, ...Default.parameters };","/* eslint-disable no-nested-ternary */\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Box from \"../Box\";\n\ninterface Props {\n  line?: number;\n  fontSize?: number;\n  lineHeight?: number;\n  stepPercentage?: number;\n  lineBreak?: number;\n}\n\nconst Paragraph = ({\n  line = 3,\n  fontSize = 16,\n  lineHeight = 1.6,\n  stepPercentage = 10,\n  lineBreak = 4\n}: Props) => {\n  const [randomForMiddle, setRandomForMiddle] = useState(0);\n  const [randomForLast, setRandomForLast] = useState(0);\n\n  useEffect(() => {\n    setRandomForMiddle(Math.random());\n    setRandomForLast(Math.random());\n  }, []);\n\n  const stepWidth = useCallback(\n    (ratio: number) => Math.floor(ratio / stepPercentage) * stepPercentage,\n    [stepPercentage]\n  );\n\n  const middleLineWidthRandomRatio = useMemo(\n    () => stepWidth(80 + Math.floor(randomForMiddle * 20)),\n    [stepWidth, randomForMiddle]\n  );\n  const lastLineWidthRandomRatio = useMemo(\n    () => stepWidth(20 + Math.floor(randomForLast * 80)),\n    [stepWidth, randomForLast]\n  );\n\n  const boxRenderer = useCallback(\n    (index: number) => {\n      if (index === line - 1) {\n        return (\n          <Box\n            size={{\n              width: `${lastLineWidthRandomRatio}%`,\n              height: fontSize\n            }}\n            key={index}\n          />\n        );\n      }\n\n      if (!((index + 1) % lineBreak)) {\n        return (\n          <Box\n            size={{\n              width: `${middleLineWidthRandomRatio}%`,\n              height: fontSize\n            }}\n            key={index}\n          />\n        );\n      }\n\n      return (\n        <Box\n          size={{\n            width: \"100%\",\n            height: fontSize\n          }}\n          key={index}\n        />\n      );\n    },\n    [\n      fontSize,\n      lastLineWidthRandomRatio,\n      line,\n      lineBreak,\n      middleLineWidthRandomRatio\n    ]\n  );\n\n  return (\n    <div style={{ fontSize, lineHeight }}>\n      {Array.from(Array(line), (_, index) => boxRenderer(index))}\n    </div>\n  );\n};\n\nexport default Paragraph;\n"],"names":[],"sourceRoot":""}