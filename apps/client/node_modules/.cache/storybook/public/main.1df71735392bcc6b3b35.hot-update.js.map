{"version":3,"file":"main.1df71735392bcc6b3b35.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACzBA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AAAA;AAUA;AAMA;AALA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AAAA;AAGA;AACA;AAAA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@toppings/client/./components/Skeleton/Base/Base.stories.tsx","webpack://@toppings/client/./components/Skeleton/Box/index.tsx","webpack://@toppings/client/./components/Skeleton/Circle.tsx","webpack://@toppings/client/./components/Skeleton/Paragraph.tsx","webpack://@toppings/client/./components/Skeleton/index.ts"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import type { Meta, Story } from \\\"@storybook/react\\\";\\nimport type { ComponentProps } from \\\"react\\\";\\n\\nimport Base from \\\"..\\\";\\n\\ntype Props = ComponentProps<typeof Base>;\\n\\nconst Template: Story<Props> = () => <Base />;\\n\\nexport const Default = Template.bind({});\\n\\nexport default {\\n  title: \\\"Base\\\",\\n  component: Base\\n} as Meta;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":8},\"endLoc\":{\"col\":45,\"line\":8},\"startBody\":{\"col\":31,\"line\":8},\"endBody\":{\"col\":45,\"line\":8}}};\n    \nimport type { Meta, Story } from \"@storybook/react\";\nimport type { ComponentProps } from \"react\";\n\nimport Base from \"..\";\n\ntype Props = ComponentProps<typeof Base>;\n\nconst Template: Story<Props> = () => <Base />;\n\nexport const Default = Template.bind({});\n\nexport default {\n  title: \"Base\",\n  component: Base\n} as Meta;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <Base />\" }, ...Default.parameters };","import styled from \"@emotion/styled\";\nimport { size as _size } from \"@toss/emotion-utils\";\nimport Base from \"..\";\n\ninterface Props {\n  size: Parameters<typeof _size>[0];\n}\n\nconst Box = styled(Base)<Props>`\n  ${({ size }) => _size(size)}\n`;\n\nexport default Box;\n","import styled from \"@emotion/styled\";\nimport Base from \".\";\n\ninterface Props {\n  size?: number;\n}\n\nconst Circle = styled(Base)<Props>`\n  width: ${({ size }) => (size ? `${size}px` : \"100%\")};\n  height: ${({ size }) => (size ? `${size}px` : \"100%\")};\n  border-radius: 50%;\n`;\n\nexport default Circle;\n","/* eslint-disable no-nested-ternary */\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Box from \"./Box\";\n\ninterface Props {\n  line?: number;\n  fontSize?: number;\n  lineHeight?: number;\n  stepPercentage?: number;\n  lineBreak?: number;\n}\n\nconst Paragraph = ({\n  line = 3,\n  fontSize = 16,\n  lineHeight = 1.6,\n  stepPercentage = 10,\n  lineBreak = 4\n}: Props) => {\n  const [randomForMiddle, setRandomForMiddle] = useState(0);\n  const [randomForLast, setRandomForLast] = useState(0);\n\n  useEffect(() => {\n    setRandomForMiddle(Math.random());\n    setRandomForLast(Math.random());\n  }, []);\n\n  const stepWidth = useCallback(\n    (ratio: number) => Math.floor(ratio / stepPercentage) * stepPercentage,\n    [stepPercentage]\n  );\n\n  const middleLineWidthRandomRatio = useMemo(\n    () => stepWidth(80 + Math.floor(randomForMiddle * 20)),\n    [stepWidth, randomForMiddle]\n  );\n  const lastLineWidthRandomRatio = useMemo(\n    () => stepWidth(20 + Math.floor(randomForLast * 80)),\n    [stepWidth, randomForLast]\n  );\n\n  const boxRenderer = useCallback(\n    (index: number) => {\n      if (index === line - 1) {\n        return (\n          <Box\n            size={{\n              width: `${lastLineWidthRandomRatio}%`,\n              height: fontSize\n            }}\n            key={index}\n          />\n        );\n      }\n\n      if (!((index + 1) % lineBreak)) {\n        return (\n          <Box\n            size={{\n              width: `${middleLineWidthRandomRatio}%`,\n              height: fontSize\n            }}\n            key={index}\n          />\n        );\n      }\n\n      return (\n        <Box\n          size={{\n            width: \"100%\",\n            height: fontSize\n          }}\n          key={index}\n        />\n      );\n    },\n    [\n      fontSize,\n      lastLineWidthRandomRatio,\n      line,\n      lineBreak,\n      middleLineWidthRandomRatio\n    ]\n  );\n\n  return (\n    <div style={{ fontSize, lineHeight }}>\n      {Array.from(Array(line), (_, index) => boxRenderer(index))}\n    </div>\n  );\n};\n\nexport default Paragraph;\n","import Base from \".\";\nimport Box from \"./Box\";\nimport Circle from \"./Circle\";\nimport Paragraph from \"./Paragraph\";\n\nexport default {\n  Base,\n  Box,\n  Circle,\n  Paragraph\n};\n"],"names":[],"sourceRoot":""}